AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Deploys webpresence GeoCore solutions

Parameters:
  Environment:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/environment
    Description: SSM parameter name for environment
  DeploymentBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/deployment-bucket
    Description: S3 bucket where all deployment files are stored
  SslCertArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/geocore/ssl-cert-arn
    Description: SSM parameter name for GeoCore ACM SSL Cert ARN
  WebAclArn:
    Type: String
    Description: ARN of the WAF web ACL to use for CloudFront
  SecHeadersLambdaEdgeArn:
    Type: String
    Description: ARN of the Lambda@Edge function for injecting security headers to CloudFront

Conditions:
  IsProd: !Equals [prod, !Ref Environment]

Resources:

  AthenaDynamodbSpillBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'webpresence-geocore-athena-dynamodb-spill-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      AccessControl: Private

  AthenaDynamoDBConnector:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:292517598671:applications/AthenaDynamoDBConnector
        SemanticVersion: 2021.41.1
      Parameters:
        AthenaCatalogName: dynamodb-analytics
        SpillBucket: !Ref AthenaDynamodbSpillBucket

  AthenaDynamodbAnalyticsCatalog:
    Type: AWS::Athena::DataCatalog
    DependsOn: AthenaDynamoDBConnector
    Properties:
      Name: dynamodb-analytics
      Parameters:
        function: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dynamodb-analytics
      Type: LAMBDA

  GeoCoreAthenaOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'webpresence-geocore-athena-output-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      AccessControl: Private

  DynamoDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: tag
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        -
          AttributeName: tag
          AttributeType: S
        -
          AttributeName: uuid
          AttributeType: S
      KeySchema:
        -
          AttributeName: tag
          KeyType: HASH
        -
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbFoundational:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: foundational
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        -
          AttributeName: tag
          AttributeType: S
        -
          AttributeName: uuid
          AttributeType: S
      KeySchema:
        -
          AttributeName: tag
          KeyType: HASH
        -
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbTheme:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: theme
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        -
          AttributeName: tag
          AttributeType: S
        -
          AttributeName: uuid
          AttributeType: S
      KeySchema:
        -
          AttributeName: tag
          KeyType: HASH
        -
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbAnalytics:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: analytics
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        -
          AttributeName: key
          AttributeType: S

      KeySchema:
        -
          AttributeName: key
          KeyType: HASH


  GeoCoreDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: geocore_metadata

  GeoCoreTableQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref GeoCoreDatabase
      WorkGroup: !Ref GeoCoreAthenaWorkGroup
      QueryString:
        !Sub "CREATE EXTERNAL TABLE `metadata`(
          `features_type` string,
          `features_geometry_type` string,
          `features_geometry_coordinates` string,
          `features_properties_id` string,
          `features_properties_title_en` string,
          `features_properties_title_fr` string,
          `features_properties_description_en` string,
          `features_properties_description_fr` string,
          `features_properties_keywords_en` string,
          `features_properties_keywords_fr` string,
          `features_properties_topiccategory` string,
          `features_properties_date_published_text` string,
          `features_properties_date_published_date` string,
          `features_properties_date_created_text` string,
          `features_properties_date_created_date` string,
          `features_properties_spatialrepresentation` string,
          `features_properties_type` string,
          `features_properties_geometry` string,
          `features_properties_temporalextent_begin` string,
          `features_properties_temporalextent_end` string,
          `features_properties_refsys` string,
          `features_properties_refsys_version` string,
          `features_properties_status` string,
          `features_properties_maintenance` string,
          `features_properties_metadatastandard_en` string,
          `features_properties_metadatastandard_fr` string,
          `features_properties_metadatastandardversion` string,
          `features_properties_graphicoverview` string,
          `features_properties_distributionformat_name` string,
          `features_properties_distributionformat_format` string,
          `features_properties_uselimits_en` string,
          `features_properties_uselimits_fr` string,
          `features_properties_accessconstraints` string,
          `features_properties_otherconstraints_en` string,
          `features_properties_otherconstraints_fr` string,
          `features_properties_datestamp` string,
          `features_properties_dataseturi` string,
          `features_properties_locale_language` string,
          `features_properties_locale_country` string,
          `features_properties_locale_encoding` string,
          `features_properties_language` string,
          `features_properties_characterset` string,
          `features_properties_environmentdescription` string,
          `features_properties_supplementalinformation_en` string,
          `features_properties_supplementalinformation_fr` string,
          `features_properties_contact` string,
          `features_properties_credits` string,
          `features_properties_cited` string,
          `features_properties_distributor` string,
          `features_properties_options` string)
        ROW FORMAT SERDE
          'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'
        STORED AS INPUTFORMAT
          'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'
        OUTPUTFORMAT
          'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'
        LOCATION
          's3://webpresence-geocore-geojson-to-parquet-${Environment}/'
        TBLPROPERTIES (
          'classification'='parquet',
          'compressionType'='none',
          'typeOfData'='file')
        "

  GeoCoreAthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: GeoCore
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub 's3://${GeoCoreAthenaOutputBucket}'

  LambdaId:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/id/id-211119.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaGeo:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/geo/geo-211119.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaFeatured:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/featured/featured-211119.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaFoundation:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/foundation/foundation_layer-211119.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaAnalytics:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/analytics/analytics-211119.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaGetAnalytics:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: cloudformation-templates/lambda/get_analytics/get_analytics-211119a.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  VerificationHeaderSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Verification header secret value used to identify request coming from CloudFront to API Gateway
      Name: /webpresence/geocore/verification-header-secret
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 32

  OriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - x-origin-verify
            - x-api-key
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
            - Origin
        Name: geocore-cloudfront-to-api-gateway
        QueryStringsConfig:
          QueryStringBehavior: all

  GeocoreDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: VerificationHeaderSecret
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Origins:
        - Id: ApiOrigin
          DomainName: !Sub ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
              - TLSv1.2
          OriginPath: /live
          OriginCustomHeaders:
            - HeaderName: X-Origin-Verify
              HeaderValue: '{{resolve:secretsmanager:/webpresence/geocore/verification-header-secret}}'
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: ApiOrigin
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
          LambdaFunctionAssociations:
            - EventType: origin-response
              LambdaFunctionARN: !Ref SecHeadersLambdaEdgeArn
        HttpVersion: http2
        WebACLId: !Ref WebAclArn
        Logging:
          Bucket: !Sub 'webpresence-cloudfront-access-logs-${Environment}.s3.amazonaws.com'
          IncludeCookies: true
          Prefix: geocore
        Aliases:
          - !If
            - IsProd
            - geocore.api.geo.ca
            - !Sub 'geocore-${Environment}.api.geo.ca'
          - !If
            - IsProd
            - www.geocore.api.geo.ca
            - !Sub 'www.geocore-${Environment}.api.geo.ca'
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref SslCertArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  RestApiWebAcl:
    Type: AWS::WAFv2::WebACL
    DependsOn: VerificationHeaderSecret
    Properties:
      Name: webpresence-geocore-cloudfront
      Scope: REGIONAL
      Description: "Restrict access to CloudFront"
      DefaultAction:
        Block: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: webpresence-geocore-cloudfront
      Rules:
        - Name: webpresence-geocore-cloudfront-header-verification
          Priority: 0
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: webpresence-geocore-cloudfront-header-verification
          Statement:
            ByteMatchStatement:
              FieldToMatch:
                SingleHeader:
                  Name: X-Origin-Verify
              PositionalConstraint: EXACTLY
              SearchString: '{{resolve:secretsmanager:/webpresence/geocore/verification-header-secret}}'
              TextTransformations:
                - Priority: 0
                  Type: NONE

  RestApiWebAclAssociations:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn:
      - RestApiliveStage
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/live"
      WebACLArn: !GetAtt RestApiWebAcl.Arn

  RestApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApiliveStage
    Properties:
      Description: API key for "search" API Gateway
      Name: search
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: live

  RestApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApiliveStage
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: live
      Description: Usage plan for "search" API Gateway
      UsagePlanName: search

  RestApiKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref RestApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RestApiKeyUsagePlan

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: search
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: '<request id="$context.requestId"> <ip>$context.identity.sourceIp</ip> <caller>$context.identity.caller</caller> <user>$context.identity.user</user> <requestTime>$context.requestTime</requestTime> <httpMethod>$context.httpMethod</httpMethod> <resourcePath>$context.resourcePath</resourcePath> <status>$context.status</status> <protocol>$context.protocol</protocol> <responseLength>$context.responseLength</responseLength><errorMessage>$context.error.message</errorMessage></request>'
      EndpointConfiguration:
        Type: REGIONAL
      OpenApiVersion: "2.0"
      StageName: live
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "search"
        schemes:
        - "https"
        paths:
          /analytics:
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/1:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"1\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/10:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"10\",\r\n    \"uuid\" : \"$input.params('uuid')\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/2:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"2\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/3:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"3\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/4:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"4\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/5:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"5\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/6:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"6\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/7:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"7\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/8:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"8\",\r\n    \"lang\" : \"$input.params('lang')\"\
                    ,\r\n    \"theme\" : \"$input.params('theme')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/9:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"9\",\r\n    \"lang\" : \"$input.params('lang')\"\
                    ,\r\n    \"org\" : \"$input.params('org')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/11:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"11\",\r\n    \"theme\" : \"$input.params('theme')\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /featured:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaFeatured}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n    \"theme\" : \"$input.params('theme')\",\n    \"\
                    lang\" : \"$input.params('lang')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /foundational:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaFoundation}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n    \"theme\" : \"$input.params('theme')\",\n    \"\
                    lang\" : \"$input.params('lang')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /geo:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGeo}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"north\" : \"$input.params('north')\",\r\n\
                    \    \"east\" : \"$input.params('east')\",\r\n    \"south\" : \"$input.params('south')\"\
                    ,\r\n    \"west\" : \"$input.params('west')\",\r\n    \"keyword\" : \"\
                    $input.params('keyword')\",\r\n    \"keyword_only\" : \"$input.params('keyword_only')\"\
                    ,\r\n    \"lang\" : \"$input.params('lang')\",\r\n    \"theme\" : \"$input.params('theme')\"\
                    ,\r\n    \"type\": \"$input.params('type')\",\r\n    \"org\": \"$input.params('org')\"\
                    ,\r\n    \"min\": \"$input.params('min')\",\r\n    \"max\": \"$input.params('max')\"\
                    ,\r\n    \"foundational\": \"$input.params('foundational')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /id:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaId}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"lang\" : \"$input.params('lang')\",\r\n  \
                    \  \"id\" : \"$input.params('id')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"


  LogGroup:
    Type: Custom::LogGroup
    Properties:
      ServiceToken: !ImportValue LogGroupHelperLambdaArn
      LogGroupName: !Sub '/${Environment}/webpresence/geocore'
      RetentionInDays: 3653
